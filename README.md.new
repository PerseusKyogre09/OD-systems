# OD System - Supabase & Vercel Edition

This is an On-Duty (OD) Management System that uses Supabase for database and authentication, and can be deployed on Vercel.

## Technology Stack

- **Backend**: Flask (Python)
- **Database**: PostgreSQL via Supabase
- **Authentication**: Supabase Auth with email verification
- **File Storage**: Supabase Storage
- **Hosting**: Vercel

## Prerequisites

- Python 3.8+
- Supabase account
- Vercel account
- Git

## Local Development Setup

1. **Clone the Repository**

   ```bash
   git clone <your-repository-url>
   cd OD-system
   ```

2. **Create a Virtual Environment**

   ```bash
   python -m venv venv
   ```

   Activate it:
   - Windows: `venv\Scripts\activate`
   - macOS/Linux: `source venv/bin/activate`

3. **Install Dependencies**

   ```bash
   pip install -r requirements.txt
   ```

4. **Set Up Supabase**

   - Create a new project in Supabase
   - Go to SQL Editor and run the SQL from `supabase_schema.sql`
   - Create a storage bucket named `od-documents` with public access
   - Copy your Supabase URL and keys

5. **Configure Environment Variables**

   Create a `.env` file with the following variables:

   ```
   # Flask Configuration
   FLASK_SECRET_KEY=your_secret_key
   FLASK_ENV=development
   DEBUG=True

   # Supabase Configuration
   SUPABASE_URL=your_supabase_url
   SUPABASE_KEY=your_supabase_anon_key
   SUPABASE_SERVICE_KEY=your_supabase_service_key

   # Admin Account
   ADMIN_EMAIL=admin@example.com
   ADMIN_PASSWORD=admin123

   # File Upload Configuration
   MAX_CONTENT_LENGTH=10485760  # 10MB in bytes
   ALLOWED_EXTENSIONS=pdf,doc,docx

   # Email Configuration
   EMAIL_USER=your_email@gmail.com
   EMAIL_PASS=your_email_password
   EMAIL_RECEIVE=teacher_email@example.com
   SMTP_SERVER=smtp.gmail.com
   SMTP_PORT=587
   ```

6. **Run the Application**

   ```bash
   flask run
   ```

   The application should be available at http://localhost:5000

## Deploying to Vercel

1. **Install Vercel CLI**

   ```bash
   npm install -g vercel
   ```

2. **Login to Vercel**

   ```bash
   vercel login
   ```

3. **Deploy the Application**

   ```bash
   vercel
   ```

4. **Set Environment Variables on Vercel**

   - Go to your project settings in the Vercel dashboard
   - Add all the environment variables from your `.env` file
   - Ensure `FLASK_ENV` is set to `production` for the production environment

5. **Deploy to Production**

   ```bash
   vercel --prod
   ```

## Supabase Setup Details

### Database Tables

- **OD Requests**: Stores the OD request details
- **Comments**: Stores comments on OD requests
- **Teacher Notifications**: Stores teacher notification preferences

### Authentication

- Email/password authentication with email verification
- Custom user metadata to store role and name

### Storage

- `od-documents` bucket for storing supporting documents

## Project Structure

- `app.py`: Main Flask application
- `api/index.py`: Entry point for Vercel serverless function
- `supabase_utils.py`: Utility functions for Supabase
- `models.py`: User model for Flask-Login
- `config.py`: Application configuration
- `vercel.json`: Vercel deployment configuration
- `supabase_schema.sql`: SQL for setting up Supabase

## Features

- User authentication with email verification
- Role-based access control (students and teachers)
- OD request submission with document upload
- OD request approval/rejection by teachers
- Comment system for OD requests
- Email notifications for new OD requests

## License

This project is licensed under the MIT License - see the LICENSE file for details.
